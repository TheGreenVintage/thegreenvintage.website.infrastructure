upstream app_server_{{ user }} {
  server unix:/home/{{ user }}/shared/sockets/dynamic.sock fail_timeout=0;
}

server {

  server_name {{ domain }} www.{{ domain }};
  root /home/{{ user }}/shared/public/static;

  listen 80;
  listen [::]:80;

  {% if certificates.stat.exists == True %}
  listen 443 ssl http2;

  ssl_certificate {{ certificates_folder }}/www.{{ domain }}/fullchain.pem;
  ssl_certificate_key {{ certificates_folder }}/www.{{ domain }}/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_stapling on;
  ssl_stapling_verify on;
  add_header Strict-Transport-Security max-age=15768000;
  {% endif %}

#  limit_conn conn_limit_per_ip 10;
#  limit_req zone=req_limit_per_ip burst=10 nodelay;

  client_max_body_size 1G;
  client_body_timeout 5s;
  client_header_timeout 5s;
  keepalive_timeout 5;
  send_timeout 10;
  server_tokens off;

  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
  add_header Content-Security-Policy "{% for key, value in csp_rules.iteritems() %}{{ key }} {{ value | join(' ') }}; {% endfor %}";

  {% if certificates.stat.exists %}
  # global HTTP handler
  if ($scheme = http) {
    return 301 https://www.{{ domain }}$request_uri;
  }

  # global non-WWW HTTPS handler
  if ($http_host = {{ domain }}) {
    return 303 https://www.{{ domain }}$request_uri;
  }
  {% endif %}

  try_files $uri $uri/ @app;

  # Initial i18n redirect
  location = / {
    set $ngx_html_path $document_root;
    content_by_lua_file /home/{{ user }}/shared/extras/lang.lua;
  }

  # Feed
  location ~* \.(?:rss|atom)$ {
    expires 1h;
    add_header Cache-Control "public";
  }

  # Media: images, icons, video, audio, HTC
  location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
    expires 7d;
    access_log off;
    add_header Cache-Control "public";
  }

  # CSS and Javascript
  location ~* \.(?:css|js)$ {
    expires 7d;
    access_log off;
    add_header Cache-Control "public";
  }

  # Fonts
  location ~* \.(eot|otf|ttf|woff|woff2)$ {
    add_header Access-Control-Allow-Origin *;
  }

  # Compression
  gzip on;
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  gzip_types text/plain text/html text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml;

  location @app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://app_server_{{ user }};
  }
}
